/**
 * NOTE: 说来惭愧，这个解法来自 Best practice，以下是看代码后的个人理解
 */

function zeros (n) {
  // 分析：
  // 1. 不能直接用阶乘，否则内存要炸
  // 2. 结尾有 0 可以质因分解成 2 * 5
  // 3. 最小的 n 也得是 5 以上才有结尾 0 的存在，而且 2 出现（偶数）的次数会比 5 多得多，只要有 5 就会有相应的 2 跟它凑成 10
  // 所以可以转化成 n! 有多少个 5 来解
  // 比如 10! 中，10 是最大的数，10 除以 5 等于 2 余 0，余数是没有贡献的，那么 10! 至少有两个 0
  // 4. 但是考虑到 25 可以贡献两个 5，所以需要循环计算

  if (n < 5) return 0

  let zeros = 0
  for (let i = 5; i < n; i *= 5) zeros += Math.floor(n / i)
  return zeros
}
